Types:

{}
for Structs

_ | _ | ...
for Enums

For Fields, literally just <field> <value> no seperating colon what so ever.
Type infront of a type literal makes it distinct:

Sec = type Num
// Sec != Num




Maybe[T] = type
    | some, val T
    | none
// using the type keyword creates an distinct type


Employe = {
    name str,
    age ux,
    salary f32,
}

{
    name "Micheal Stevens",
    age 40
    salary 20_000_000
}

add(a f32, b f32): f32

v(t Sec): Meter/Sec = proc return t * 10m

add(a 1, b 2)
v(10)

Linked List:

Node[T] = type {
    content T,
    next | { some, next -}-> Node
         | .none
}

{ content 0, next { Some, -}}->
{ content 1, next { Some, -}}->
{ content 1, next None }

bool : Copy : | true
              | false = 0

bool = true

Slice[T] {
    len ux,
    ptr -> (len * T)
}
Copy(Slice)

On placeholders:

.. will be used throughout the language. _ has no special meaning. ".." can also be used to drop:
