OPERATORS


Operators are essential in programming languages. They are the building blocks for any larger operation.
In Thyn they combine two, less or more identifiers and act one them. These are all operators one by one.
The operators with the lowest binding power come first, then it gets higher and higher:


Equation Operator:
    a = b       Definition

Mutations:                                      | overloadable
    a := b      Writing

    a |= b      OR-Assign
    a >|= b     XOR-Assign
    a &= b      AND-Assign

    a += b      Addition-Assign
    a -= b      Subtraction-Assign

    a *= b      Multiplication-Assign
    a /= b      Division-Assign
    a %= b      Modulo-Assign

    a =|= b     Swapping

    a++         Incrementation
    a--         Decrementation

Comma Operator:

    a, b        Combining values into a list.

Logical Operators (lazy):

    a || b  Or
    a >|| b Xor
    a && b  And


Comparison Operators (can be chained):

    a == b      Equality
    a != b      Inequality
    a < b       Smaller
    a > b       Greater
    a <= b      Smaller or Equal
    a >= b      Greater of Equal


Mathematical/Binary Operators:                  | overloadable

    a <<    Bitshift left
    a >>    Bitshift right

    a | b   Bitwise OR
    a >| b  Bitwise XOR
    a & b   Bitwise AND

    a + b    Addition
    a - b    Subtraction

    a * b    Multiplication
    a / b    Division
    a % b    Euclidic Modulo: -10 % 3 = 2; 10 % -3 = -2

    -a       Negation

    User Defined Operators get defaulted here, for instance:

    Â· (dot-product),
    >< (cross-product),
    ^ (power)

Pipe Operator:

    a |> b   Piping
                 note: The precendence can be ignored while writing patterns.
    a <| b

Prefix Unary Operators:                         | overloadable
    !a          Invertion (bitwise & logical)
    -> a
    a <-        Referencing
    *a          Dereferencing

Application:

    a(b)        Calling
    a[b]        Indexing

Lifetime:
    'a          Lifetiming
