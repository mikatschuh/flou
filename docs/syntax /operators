OPERATORS


Operators are essential in programming languages. They are the building blocks for any larger operation.
In Thyn they combine two, less or more identifiers and act one them. These are all operators one by one.
The operators with the lowest binding power come first, then it gets higher and higher:


0 Equation Operator:
    a = b       Definition

1 Mutations:                                      | overloadable
    a := b      Writing

    a *= b      Multiplication-Assign
    a /= b      Division-Assign
    a %= b      Modulo-Assign

    a += b      Addition-Assign
    a -= b      Subtraction-Assign

    a &= b      Bitwise AND-Assign
    a |= b      Bitwise OR-Assign
    a >|= b     Bitwise XOR-Assign

    a =|= b     Swapping

2 Comma Operator:
    a, b        Combining values into a list.

3 Logical Operators (lazy):
    a || b      Or
    a !|| b     Nor
    a && b      And
    a !&& b     Nand

4 Comparison Operators (can be chained):

    a == b   Equality
    a != b   Inequality
    a < b    Smaller
    a > b    Greater
    a <= b   Smaller or Equal
    a >= b   Greater of Equal


5 Mathematical/Binary Operators:                  | overloadable

    5.1 a & b    Bitwise AND
        a | b    Bitwise OR
        a >| b   Bitwise XOR

    5.2 a + b    Addition
        a - b    Subtraction

    5.3 a * b    Multiplication
        a / b    Division
        a % b    Euclidic Modulo: -10 % 3 = 2; 10 % -3 = -2

    5.4 -a       Negation
        +a       Double Negation

    5.5 User Defined Operators get defaulted here, for instance:
        Â· (dot-product),
        >< (cross-product),
        ^ (power)

6 Pipe Operator:

    6.1 a |> b   Piping
                 note: The precendence can be ignored while writing patterns.
    6.2 a <| b

7 Types:
    a b        Typing identifiers

8 Postfix Unary Mutations:                        | overloadable
    a++         Incrementation
    a--         Decrementation

9 Prefix Unary Operators:                         | overloadable
    !a          Invertion (bitwise & logical)
    -> a        Referencing

10 Application:
    a(b)        Calling
    a[b]        Indexing

11 Lifetime:
    'a          Lifetiming
